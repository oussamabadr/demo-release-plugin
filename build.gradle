import java.util.concurrent.TimeUnit

plugins {
	id 'org.springframework.boot' version '2.3.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'net.researchgate.release' version '2.8.1'
	id 'com.dorongold.task-tree' version '1.5'
	id 'java'
}

sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}

release {
	git {
		requireBranch = ''
	}
}

commitNewVersion.doLast {
	logger.info (['git', 'checkout', 'master'].execute().text.trim())

	Process gitMergeCmd = ['git', 'merge', 'release'].execute()
	logger.info("Waiting for merging master with release...")
	gitMergeCmd.waitFor(5, TimeUnit.MINUTES)

	if (gitMergeCmd.exitValue() == 0) {
		logger.info (['git', 'push', 'origin', 'master'].execute().text.trim())
	} else {
		logger.warn("Abort merge due to conflict with master!")
		logger.warn(['git', 'merge', '--abort'].execute().text.trim())
	}

	logger.info (['git', 'checkout', 'release'].execute().text.trim())

}

task printMyVersion() {
//	mustRunAfter commitNewVersion

	doLast {
		exec {
			commandLine 'git', 'status'
		}
		logger.warn( "ddddddddddddReleased version ")
	}
}

task uploadVersion() {
//	mustRunAfter commitNewVersion

	doLast {
		logger.warn( "Uploading version ")
	}
}

commitNewVersion.finalizedBy printMyVersion, uploadVersion

//printVersion.dependsOn commitNewVersion
