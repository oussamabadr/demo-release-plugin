import java.nio.charset.StandardCharsets
import java.util.concurrent.TimeUnit

plugins {
	id 'org.springframework.boot' version '2.3.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'net.researchgate.release' version '2.8.1'
	id 'com.dorongold.task-tree' version '1.5'
	id 'java'
}

sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}

release {
	git {
		requireBranch = ''
	}
}

commitNewVersion.doLast {
	['git', 'checkout', 'master'].execute().waitFor()

	logger.info("Merging master with release...")
	Process gitCmd = ['git', 'merge', 'releaseee'].execute() // stimulate error
	gitCmd.waitFor()

	if (gitCmd.exitValue() == 0) {
        logger.info("Push merge to master...")
		gitCmd = ['git', 'push', 'origin', 'master'].execute()
		gitCmd.waitFor()
	}

	if (gitCmd.exitValue() == 0) {
		gitCmd = ['git', 'checkout', 'release'].execute()
		gitCmd.waitFor()
	}

	if (gitCmd.exitValue() != 0) {
		['git', 'merge', '--abort'].execute().waitFor()
		['git', 'checkout', 'release'].execute().waitFor()
		throw new GradleException("Merge aborted with master caused by: \n${gitCmd.getErrorStream().getText(StandardCharsets.UTF_8.name())}")
	}

//	throw new GradleException("Some exception")

}

task printMyVersion() {
//	mustRunAfter commitNewVersion

//	doFirst {
//		if (commitNewVersion.state.failure != null) {
//			throw new GradleException("Some exception")
//		}
//	}
	doLast {
//		exec {
//			commandLine 'git', 'status'
//		}
		logger.warn( "Released version ${project.version}")
	}
}



task uploadVersion() {
//	mustRunAfter commitNewVersion
	doLast {
		logger.warn( "Uploading version ${project.version} ")
	}
}

//uploadVersion.doFirst {
//
//	if (commitNewVersion.state.failure != null) {
//		throw new GradleException("Some exception")
//	}
//
//}

afterReleaseBuild.dependsOn uploadVersion, printMyVersion